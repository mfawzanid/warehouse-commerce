// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "mfawzanid/warehouse-commerce/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// RedisRepositoryInterface is an autogenerated mock type for the RedisRepositoryInterface type
type RedisRepositoryInterface struct {
	mock.Mock
}

// GetReservedProductQuantity provides a mock function with given fields: ctx, productId, warehouseId
func (_m *RedisRepositoryInterface) GetReservedProductQuantity(ctx context.Context, productId string, warehouseId string) (int, error) {
	ret := _m.Called(ctx, productId, warehouseId)

	if len(ret) == 0 {
		panic("no return value specified for GetReservedProductQuantity")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, productId, warehouseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, productId, warehouseId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, productId, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateLockOrderProduct provides a mock function with given fields: ctx, req
func (_m *RedisRepositoryInterface) InvalidateLockOrderProduct(ctx context.Context, req *entity.LockOrderProductRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateLockOrderProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.LockOrderProductRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LockOrderProduct provides a mock function with given fields: ctx, req
func (_m *RedisRepositoryInterface) LockOrderProduct(ctx context.Context, req *entity.LockOrderProductRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LockOrderProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.LockOrderProductRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisRepositoryInterface creates a new instance of RedisRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepositoryInterface {
	mock := &RedisRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
