// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	entity "mfawzanid/warehouse-commerce/core/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// InventoryRepositoryInterface is an autogenerated mock type for the InventoryRepositoryInterface type
type InventoryRepositoryInterface struct {
	mock.Mock
}

// GetDb provides a mock function with no fields
func (_m *InventoryRepositoryInterface) GetDb() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDb")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetProductByName provides a mock function with given fields: name
func (_m *InventoryRepositoryInterface) GetProductByName(name string) (*entity.Product, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByName")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Product, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Product); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetailsByShopId provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) GetProductDetailsByShopId(req *entity.GetProductDetailsByShopIdRequest) (*entity.GetProductDetailsByShopIdResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDetailsByShopId")
	}

	var r0 *entity.GetProductDetailsByShopIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.GetProductDetailsByShopIdRequest) (*entity.GetProductDetailsByShopIdResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.GetProductDetailsByShopIdRequest) *entity.GetProductDetailsByShopIdResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetProductDetailsByShopIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.GetProductDetailsByShopIdRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductWarehousesByQuery provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) GetProductWarehousesByQuery(req *entity.GetProductWarehousesByQueryRequest) ([]*entity.ProductWarehouse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductWarehousesByQuery")
	}

	var r0 []*entity.ProductWarehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.GetProductWarehousesByQueryRequest) ([]*entity.ProductWarehouse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.GetProductWarehousesByQueryRequest) []*entity.ProductWarehouse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ProductWarehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.GetProductWarehousesByQueryRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShops provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) GetShops(req *entity.GetShopsRequest) (*entity.GetShopsResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetShops")
	}

	var r0 *entity.GetShopsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.GetShopsRequest) (*entity.GetShopsResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.GetShopsRequest) *entity.GetShopsResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetShopsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.GetShopsRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehouses provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) GetWarehouses(req *entity.GetWarehousesRequest) (*entity.GetWarehousesResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetWarehouses")
	}

	var r0 *entity.GetWarehousesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.GetWarehousesRequest) (*entity.GetWarehousesResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.GetWarehousesRequest) *entity.GetWarehousesResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetWarehousesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.GetWarehousesRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: tx, product
func (_m *InventoryRepositoryInterface) InsertProduct(tx *sql.Tx, product *entity.Product) error {
	ret := _m.Called(tx, product)

	if len(ret) == 0 {
		panic("no return value specified for InsertProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *entity.Product) error); ok {
		r0 = rf(tx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertProductWarehouse provides a mock function with given fields: pw
func (_m *InventoryRepositoryInterface) InsertProductWarehouse(pw *entity.ProductWarehouse) error {
	ret := _m.Called(pw)

	if len(ret) == 0 {
		panic("no return value specified for InsertProductWarehouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.ProductWarehouse) error); ok {
		r0 = rf(pw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertProductWarehouseTx provides a mock function with given fields: tx, pw
func (_m *InventoryRepositoryInterface) InsertProductWarehouseTx(tx *sql.Tx, pw *entity.ProductWarehouse) error {
	ret := _m.Called(tx, pw)

	if len(ret) == 0 {
		panic("no return value specified for InsertProductWarehouseTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *entity.ProductWarehouse) error); ok {
		r0 = rf(tx, pw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertShop provides a mock function with given fields: shop
func (_m *InventoryRepositoryInterface) InsertShop(shop *entity.Shop) error {
	ret := _m.Called(shop)

	if len(ret) == 0 {
		panic("no return value specified for InsertShop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Shop) error); ok {
		r0 = rf(shop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertShopWarehouses provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) InsertShopWarehouses(req *entity.UpsertShopToWarehousesRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for InsertShopWarehouses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UpsertShopToWarehousesRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertWarehouse provides a mock function with given fields: warehouse
func (_m *InventoryRepositoryInterface) InsertWarehouse(warehouse *entity.Warehouse) error {
	ret := _m.Called(warehouse)

	if len(ret) == 0 {
		panic("no return value specified for InsertWarehouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Warehouse) error); ok {
		r0 = rf(warehouse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductWarehouseTotalStock provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) UpdateProductWarehouseTotalStock(req *entity.UpdateProductWarehouseTotalStockRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductWarehouseTotalStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UpdateProductWarehouseTotalStockRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWarehouseStatus provides a mock function with given fields: req
func (_m *InventoryRepositoryInterface) UpdateWarehouseStatus(req *entity.UpdateWarehouseStatusRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWarehouseStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UpdateWarehouseStatusRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInventoryRepositoryInterface creates a new instance of InventoryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryRepositoryInterface {
	mock := &InventoryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
