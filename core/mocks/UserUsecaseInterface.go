// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	entity "mfawzanid/warehouse-commerce/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseInterface is an autogenerated mock type for the UserUsecaseInterface type
type UserUsecaseInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: req
func (_m *UserUsecaseInterface) Login(req *entity.LoginRequest) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.LoginRequest) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.LoginRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: req
func (_m *UserUsecaseInterface) RegisterUser(req *entity.RegisterUserRequest) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.RegisterUserRequest) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.RegisterUserRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.RegisterUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecaseInterface creates a new instance of UserUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecaseInterface {
	mock := &UserUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
