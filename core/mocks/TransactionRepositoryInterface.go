// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	entity "mfawzanid/warehouse-commerce/core/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// TransactionRepositoryInterface is an autogenerated mock type for the TransactionRepositoryInterface type
type TransactionRepositoryInterface struct {
	mock.Mock
}

// GetDb provides a mock function with no fields
func (_m *TransactionRepositoryInterface) GetDb() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDb")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetOrderById provides a mock function with given fields: id, isActive
func (_m *TransactionRepositoryInterface) GetOrderById(id string, isActive *bool) (*entity.Order, error) {
	ret := _m.Called(id, isActive)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *bool) (*entity.Order, error)); ok {
		return rf(id, isActive)
	}
	if rf, ok := ret.Get(0).(func(string, *bool) *entity.Order); ok {
		r0 = rf(id, isActive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *bool) error); ok {
		r1 = rf(id, isActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByOrderId provides a mock function with given fields: orderId
func (_m *TransactionRepositoryInterface) GetOrderItemsByOrderId(orderId string) ([]*entity.OrderItem, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByOrderId")
	}

	var r0 []*entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entity.OrderItem, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) []*entity.OrderItem); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: order
func (_m *TransactionRepositoryInterface) InsertOrder(order *entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrderItems provides a mock function with given fields: items
func (_m *TransactionRepositoryInterface) InsertOrderItems(items []*entity.OrderItem) error {
	ret := _m.Called(items)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*entity.OrderItem) error); ok {
		r0 = rf(items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPayment provides a mock function with given fields: tx, req
func (_m *TransactionRepositoryInterface) InsertPayment(tx *sql.Tx, req *entity.Payment) error {
	ret := _m.Called(tx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *entity.Payment) error); ok {
		r0 = rf(tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: tx, req
func (_m *TransactionRepositoryInterface) UpdateOrder(tx *sql.Tx, req *entity.UpdateOrderRequest) error {
	ret := _m.Called(tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *entity.UpdateOrderRequest) error); ok {
		r0 = rf(tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepositoryInterface creates a new instance of TransactionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepositoryInterface {
	mock := &TransactionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
