// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	entity "mfawzanid/warehouse-commerce/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionUsecaseInterface is an autogenerated mock type for the TransactionUsecaseInterface type
type TransactionUsecaseInterface struct {
	mock.Mock
}

// GetProductDetailsByShopId provides a mock function with given fields: req
func (_m *TransactionUsecaseInterface) GetProductDetailsByShopId(req *entity.GetProductDetailsByShopIdRequest) (*entity.GetProductDetailsByShopIdResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDetailsByShopId")
	}

	var r0 *entity.GetProductDetailsByShopIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.GetProductDetailsByShopIdRequest) (*entity.GetProductDetailsByShopIdResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.GetProductDetailsByShopIdRequest) *entity.GetProductDetailsByShopIdResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetProductDetailsByShopIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.GetProductDetailsByShopIdRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderProducts provides a mock function with given fields: req
func (_m *TransactionUsecaseInterface) OrderProducts(req *entity.OrderProductsRequest) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for OrderProducts")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.OrderProductsRequest) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.OrderProductsRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.OrderProductsRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayOrder provides a mock function with given fields: req
func (_m *TransactionUsecaseInterface) PayOrder(req *entity.PayOrderRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.PayOrderRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionUsecaseInterface creates a new instance of TransactionUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionUsecaseInterface {
	mock := &TransactionUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
